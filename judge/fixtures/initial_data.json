[
    {
        "pk": 1,
        "model": "judge.problem",
        "fields": {
            "input_description": "You are given a list of n (1 <= n <= 1000000) single space separated numbers.",
            "output_description": "Print one line containing the largest value.",
            "name": "Max",
            "problem_statement": "Print the largest value from a list of numbers.",
            "solution": "sol"
        }
    },
    {
        "pk": 2,
        "model": "judge.problem",
        "fields": {
            "input_description": "You are given a list of n (1 <= n <= 1000000) single space separated numbers. ",
            "output_description": "Print the list sorted in ascending order. ",
            "name": "Sort",
            "problem_statement": "Given a list of numbers, sort it in ascending order.",
            "solution": "Sol"
        }
    },
    {
        "pk": 1,
        "model": "judge.tutorial",
        "fields": {
            "description": "Haskell Primer",
            "title": "Haskell Primer"
        }
    },
    {
        "pk": 2,
        "model": "judge.tutorial",
        "fields": {
            "description": "Java Primer",
            "title": "Java Primer"
        }
    },
    {
        "pk": 3,
        "model": "judge.tutorial",
        "fields": {
            "description": "Data Structures",
            "title": "Data Structures"
        }
    },
    {
        "pk": 4,
        "model": "judge.tutorial",
        "fields": {
            "description": "Graph Algorithms",
            "title": "Graph Algorithms"
        }
    },
    {
        "pk": 5,
        "model": "judge.tutorial",
        "fields": {
            "description": "Advanced Graph Alghoritms",
            "title": "Advanced Graph Algorithms"
        }
    },
    {
        "pk": 6,
        "model": "judge.tutorial",
        "fields": {
            "description": "Hardcore Graph Algorithms",
            "title": "Hardcore Graph Algorithms"
        }
    },
    {
        "pk": 1,
        "model": "judge.tutorialdependencies",
        "fields": {
            "tutorial_dep": 1,
            "tutorial": 3
        }
    },
    {
        "pk": 2,
        "model": "judge.tutorialdependencies",
        "fields": {
            "tutorial_dep": 2,
            "tutorial": 3
        }
    },
    {
        "pk": 3,
        "model": "judge.tutorialdependencies",
        "fields": {
            "tutorial_dep": 3,
            "tutorial": 4
        }
    },
    {
        "pk": 4,
        "model": "judge.tutorialdependencies",
        "fields": {
            "tutorial_dep": 4,
            "tutorial": 5
        }
    },
    {
        "pk": 5,
        "model": "judge.tutorialdependencies",
        "fields": {
            "tutorial_dep": 5,
            "tutorial": 6
        }
    },
    {
        "pk": 1,
        "model": "judge.testcase",
        "fields": {
            "sample": true,
            "input_data": "1 2 3 4",
            "problem": 1,
            "output_data": "4"
        }
    },
    {
        "pk": 2,
        "model": "judge.testcase",
        "fields": {
            "sample": true,
            "input_data": "5 1",
            "problem": 1,
            "output_data": "5"
        }
    },
    {
        "pk": 3,
        "model": "judge.testcase",
        "fields": {
            "sample": false,
            "input_data": "4 1",
            "problem": 1,
            "output_data": "4"
        }
    },
    {
        "pk": 4,
        "model": "judge.testcase",
        "fields": {
            "sample": true,
            "input_data": "6 5 4 3 2 1",
            "problem": 2,
            "output_data": "1 2 3 4 5 6"
        }
    },
    {
        "pk": 5,
        "model": "judge.testcase",
        "fields": {
            "sample": true,
            "input_data": "1231 1 22 0 1",
            "problem": 2,
            "output_data": "0 1 1 22 1231"
        }
    },
    {
        "pk": 1,
        "model": "judge.submission",
        "fields": {
            "submittedAt": "2012-12-08T13:54:16.001Z",
            "language": "C++",
            "author": 1,
            "evaluated": false,
            "overall_result": "",
            "compiler_output": "",
            "problem": 1,
            "source_code": "#include <iostream>\n#include <fstream>\n#include <algorithm>\n#include <math.h>\n\nusing namespace std;\n\nifstream in(\"submultimi.in\");\nofstream out(\"submultimi.out\");\n\nint main() {\n\n\tfreopen(\"submultimi.in\", \"r\", stdin);\n\tfreopen(\"submultimi.out\", \"w\", stdout);\n\t\n\n\tint n, maxNum;\n\tscanf(\"%d\", &n);\n\tmaxNum = pow(2.0, n);\n\tfor(int num =1; num < maxNum; num++) {\n\t        for (int i = 0; i < n; i++) {\n                int mask = 1 << i;\n                if ( (mask & num) == mask) \n                        printf(\"%d \", i + 1);\n        \t}\n\t\tprintf(\"\\n\");\n\t}\n\n\treturn 0;\n}\n"
        }
    },
    {
        "pk": 2,
        "model": "judge.submission",
        "fields": {
            "submittedAt": "2012-12-08T13:54:25.807Z",
            "language": "C++",
            "author": 1,
            "evaluated": false,
            "overall_result": "",
            "compiler_output": "",
            "problem": 2,
            "source_code": "#include <iostream>\n#include <stdio.h>\n#define MAXN 101\n\nint main() {\n\n\tint n;\n\tint d[MAXN];\n\tscanf(\"%d\", &n);\n\tfor ( int i = 0; i < n ; i++ ) {\n\t\tscanf(\"%d\", &d[i]);\n\t}\n\n\tint max_xor = 0;\n\n\tfor (int i = 0; i < n; i++) {\n\t\tint xr = 0;\n\t\tfor (int l = 0; l < n - i; l++) {\n\t\t\txr = xr ^ d[i + l];\n\t\t\tif (xr > max_xor) max_xor = xr;\n\t\t}\n\n\t}\n\n\tprintf(\"%d\\n\", max_xor);\n\n}\n"
        }
    },
    {
        "pk": 1,
        "model": "judge.news",
        "fields": {
            "text": "Check out the new <a href=\"/problems\">problem archive</a>.",
            "pub_date": "2012-12-08T00:34:21Z",
            "title": "Problem Archive is Live!"
        }
    }
]